@model HulubejeBooking.Models.CInemaModels.Movie;
@using HulubejeBooking.Models.CInemaModels;
@using System.Web
<div class="mt-2 d-flex justify-content-between">
    <h5>Trending Movies</h5>
    <div class="dropdown-container ml-3">
        <button type="button" class="btn btn-primary btn-sm dropdown-toggle"  data-toggle="dropdown">
            Filter By
        </button>
        <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuButton">
            <label class="dropdown-item">
                <input type="radio" name="filterOption" id="filterLast24" class="mr-2" value="Last 24 Hours"> Last 24 Hours
            </label>
            <label class="dropdown-item">
                <input type="radio" name="filterOption" id="filterThisWeek" class="mr-2" value="This Week" checked> This Week
            </label>
            <label class="dropdown-item">
                <input type="radio" name="filterOption" id="filterThisMonth" class="mr-2" value="This Month"> This Month
            </label>
        </div>
    </div>
</div>
<div class="row mt-1">
    <div class="scrolling-wrapper-flexbox" id="movieCards">
        <!-- Hidden Form -->
        <form id="cinemaSelectionForm" method="post" action="/movieDetails">
            <input type="hidden" name="tin" id="selectedCinemaTIN" />
            <input type="hidden" name="branchCode" id="selectedCinemaBranchCode" />
            <input type="hidden" name="movieName" id="selectedMovieName" />
        </form>

        <!-- Modal -->
        <div class="modal fade" id="cinemaSelectionModal" tabindex="-1" aria-labelledby="cinemaSelectionModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="cinemaSelectionModalLabel">Select Cinema</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p id="selectedMovieText"></p>
                        <ul class="list-group" id="cinemaList"></ul>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="confirmSelection">Confirm Selection</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Movie Cards -->
        @foreach (var companies in Model?.TrendingMovies ?? new List<HulubejeBooking.Models.CInemaModels.CompanyData>())
        {
            foreach (var trendingMovies in companies.Movies ?? new List<Movies>())
            {
                var companiess = companies?.Companies ?? new List<Companies>();
                companiess.Insert(0, new Companies
                    {
                        Tin = companies?.TIN,
                        BranchCode = companies?.BranchCode?.ToString()
                    });
                 companiess.ForEach(c => c.CompanyName = Model?.Companies?.Data?.Where(d => d?.Tin?.ToString() == c?.Tin?.ToString()).FirstOrDefault()?.BrandName);
                var santizedMovieName = HttpUtility.JavaScriptStringEncode(@trendingMovies?.MovieName);

                <div class="card trending"
                     data-thisweek="@companies?.Stat?.Count?.Week"
                     data-last24="@companies?.Stat?.Count?.Day"
                     data-thismonth="@companies?.Stat?.Count?.Month"
                     data-rankday="@companies?.Stat?.Place?.Day"
                     data-rankweek="@companies?.Stat?.Place?.Week"
                     data-rankmonth="@companies?.Stat?.Place?.Month"
                     data-moviename="@santizedMovieName"
                     data-cinemas='@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(companiess))'
                     style="width: 12rem; margin-right: 1rem;"
                     onclick="openCinemaSelectionModal(this)">
                    <img class="card-img-top" src="@trendingMovies?.MoviePoster" alt="movie poster">
                    <div class="p-2 text-center">
                        <div class="movie-name-container">
                            <p class="m-0">@trendingMovies?.MovieName</p>
                        </div>
                        <div>
                            <i class="fas fa-users text-sm-start" style="font-size: small"></i>
                            <small class="peopleInterested">@FormatNumber(companies?.Stat?.Count?.Week ?? 0) interested</small>
                        </div>
                        @if (companies?.IsTrendingUp ?? false)
                        {
                            <i class="fas fa-angle-double-up text-success"></i>
                        }
                        else if (companies?.IsTrendingDown ?? false)
                        {
                            <i class="fas fa-angle-double-down text-danger"></i>
                        }
                        <small class="rank">@companies?.Stat?.Place?.Week in this Week</small>
                        <hr class="my-1">
                        <p class="text-center mb-0">@companies?.CompanyName</p>
                    </div>
                </div>
            }
        }
    </div>
</div>

<script>
    let selectedMovieName = "";
    let cinemas = [];

    function openCinemaSelectionModal(card) {
        // Get movie name and cinema list from the clicked card
        selectedMovieName = card.getAttribute('data-moviename');
        cinemas = JSON.parse(card.getAttribute('data-cinemas'));

        // Populate modal with movie name and cinema list
        document.getElementById('selectedMovieText').innerText = `Select a cinema for: ${selectedMovieName}`;
        const cinemaList = document.getElementById('cinemaList');
        cinemaList.innerHTML = "";

        cinemas.forEach((cinema, index) => {
            const listItem = document.createElement('li');
            listItem.className = "list-group-item";
            listItem.innerHTML = `
                <input type="radio" name="cinema" id="cinema${index}" value="${cinema.Tin},${cinema.BranchCode}" />
                <label for="cinema${index}" class="ms-2">${cinema.CompanyName}</label>
            `;
            cinemaList.appendChild(listItem);
        });

        // Show the modal
        const modal = new bootstrap.Modal(document.getElementById('cinemaSelectionModal'));
        modal.show();
    }

    document.getElementById('confirmSelection').addEventListener('click', () => {
        // Get selected cinema
        const selectedCinema = document.querySelector('input[name="cinema"]:checked');
        if (!selectedCinema) {
            alert("Please select a cinema.");
            return;
        }

        const [selectedTIN, selectedBranchCode] = selectedCinema.value.split(',');

        // Update hidden form inputs
        document.getElementById('selectedCinemaTIN').value = selectedTIN;
        document.getElementById('selectedCinemaBranchCode').value = selectedBranchCode;
        document.getElementById('selectedMovieName').value = selectedMovieName;

        // Submit the form
        document.getElementById('cinemaSelectionForm').submit();
    });




    document.querySelectorAll('input[type="radio"]').forEach(function (item) {
        item.addEventListener('change', function () {
            var selectedFilter = this.id;
            switch (selectedFilter) {
                case 'filterLast24':
                    sortMovies('data-last24');
                    break;
                case 'filterThisWeek':
                    sortMovies('data-thisweek');
                    break;
                case 'filterThisMonth':
                    sortMovies('data-thismonth');
                    break;
                default:
                    console.log("Invalid filter selected");
            }
        });
    });

    function sortMovies(dataAttribute) {
        const container = document.getElementById('movieCards');
        const cards = Array.from(container.getElementsByClassName('trending'));

        cards.sort((a, b) => {
            const aValue = parseInt(a.getAttribute(dataAttribute)) || 0;
            const bValue = parseInt(b.getAttribute(dataAttribute)) || 0;
            return bValue - aValue;
        });
        cards.forEach(card => container.appendChild(card));
        cards.forEach(card => {
            const interestedPeople = card.querySelector('.peopleInterested');
            let interestedPeopleText = '';
            switch (dataAttribute) {
                case 'data-thisweek':
                    interestedPeopleText = `${formatNumber(card.dataset.thisweek)} interested`;
                    break;
                case 'data-last24':
                    interestedPeopleText = `${formatNumber(card.dataset.last24)} interested`;
                    break;
                case 'data-thismonth':
                    interestedPeopleText = `${formatNumber(card.dataset.thismonth)} interested`;
                    break;
                default:
                    console.log("Invalid filter selected");
            }

            interestedPeople.textContent = interestedPeopleText;
        });
        cards.forEach(card => {
            const rank = card.querySelector('.rank');
            let ranktext = '';
            switch (dataAttribute) {
                case 'data-thisweek':
                    ranktext = `${card.dataset.rankweek} in this week`;
                    break;
                case 'data-last24':
                    ranktext = `${card.dataset.rankday} in the last 24 hours`;
                    break;
                case 'data-thismonth':
                    ranktext = `${card.dataset.rankmonth} in this month`;
                    break;
                default:
                    console.log("Invalid filter selected");
            }

            rank.textContent = ranktext;
        });
    }
    function formatNumber(numbers) {
        var number = parseInt(numbers);
        console.log(number);
        if (number >= 1000000000)
            return (number / 1000000000).toFixed(1) + "B";
        else if (number >= 1000000)
            return (number / 1000000).toFixed(1) + "M";
        else if (number >= 1000)
            return (number / 1000).toFixed(1) + "k";
        else
            return number.toString();
    }
</script>

<style>
    .trending:hover{
        cursor: pointer;
    }
    .scrolling-wrapper-flexbox {
        display: flex;
        flex-wrap: nowrap;
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
        padding-bottom: 1rem;
    }
    .scrolling-wrapper-flexbox .card {
        flex: 0 0 auto;
    }
    .card-img-top {
        height: 250px !important;
        width: auto;
        max-width: 100%;
        aspect-ratio: 2 / 3;
    }
    .movie-name-container {
        overflow: hidden;
/*         white-space: nowrap;
 */        box-sizing: border-box;
        width: 100%;
        position: relative;
    }
    .marquee {
        overflow: hidden;
        white-space: nowrap;
        box-sizing: border-box;
        width: 100%;
        position: relative;
    }
    .marquee p {
        display: inline-block;
        padding-left: 100%;
        animation: marquee 10s linear infinite;
    }
    @@keyframes marquee {
        from {
            transform: translateX(100%);
        }
        to {
            transform: translateX(-100%);
        }
    }
</style>
@functions {
    public static string FormatNumber(double number)
    {
        if (number >= 1000000000)
            return (number / 1000000000D).ToString("0.#") + "B";
        else if (number >= 1000000)
            return (number / 1000000D).ToString("0.#") + "M";
        else if (number >= 1000)
            return (number / 1000D).ToString("0.#") + "k";
        else
            return number.ToString();
    }
}