@model HulubejeBooking.Models.CInemaModels.SeatLayouts
@using System.Globalization
@using System.Web
@{
    string formattedDate = DateTime.Now.ToString("MMM-d h.mmtt");
}
@{
    var isVaild = ViewBag.isVaild;
    var isLoggedIN = ViewBag.isLoggedIn;
}
<script>
    sessionStorage.setItem("isValid", @Json.Serialize(@isVaild));
    sessionStorage.setItem("isLoggedIn", @Json.Serialize(@isLoggedIN));
</script>
<partial name="_Navigation" />
<head>
    <title>Seat Layout</title>
    <style>
        .btn:focus,
        .btn:active {
            outline: none !important;
            box-shadow: none !important;
        }

        .container-xl {
            max-width: 100%;
            overflow-x: auto;
        }

        .buttons:hover {
            background-color: green;
            color: white;
            cursor: pointer;
        }

        .buttons {
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0;
            font-size: 10px;
            font-weight: 400;
            background: #fff;
            border: 1px solid #1ea83c;
            border-radius: 2px;
            color: #1ea83c;
            width: 30px;
            height: 30px;
        }
        .takenorbookedseats{
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0;
            font-size: 10px;
            font-weight: 400;
            background: #fff;
            border: 1px solid #1ea83c;
            border-radius: 2px;
            color: #1ea83c;
            width: 30px;
            height: 30px;
        }
        .hall {
            width: 100%;
            height: 100%;
        }

        .booked-seat {
            background-color: blue;
            color: white;
        }

        .taken {
            background-color: orange;
            color: white;
        }

        .booked {
            background-color: blue;
            color: white;
        }

        .sold {
            background-color: red;
            color: white;
        }
    </style>
    @{
        var santizedMovieName = HttpUtility.JavaScriptStringEncode(Model?.Data?.MovieName);
    }
    <script>
        var selectedSeats = [];
        var countdownInterval;
        var countdownTime = 60;
        var isBookingStarted = false;
        var isThereSelectedSeat = sessionStorage.getItem('secondsAdded');
        selectedSeats = sessionStorage.getItem('selectedSeats');
        var key = "cinema_" +'@Model?.Data?.CompanyTinNumber' + '_' + '@Model?.Data?.BranchCode' + '_' + '@Model?.Data?.MovieScheduleCode';
        var seatCacheKey = key +"_" +'@Model?.Data?.SelectedDate';
        function fetchSeatStatus() {
            $.ajax({
                url: 'https://cache.cnetcommerce.com/api/cache/getEntriesContainsKey?key=' + key,
                headers: {
                    "x-api-key": "3e1a8b15-ygqa-3965-l5es-509a88f53477"
                },
                method: "GET",
                success: function (response) {
                    var fetchedSeatIds = response.map(function (seat) {
                        return seat.value.toString();
                    });

                    $("button").each(function () {
                        var buttonId = $(this).attr("id");
                        if (buttonId && fetchedSeatIds.indexOf(buttonId) === -1) {
                            $(this).removeClass("taken booked sold");
                        }
                    });

                    response.forEach(function (seat) {
                        var buttonId = seat.value.toString();
                        var button = document.getElementById(buttonId);
                        if (button) {
                            button.dataset.seatStatus = seat.status;
                            button.classList.remove("taken", "booked", "sold");
                            button.classList.add(seat.status);
                        }
                    });
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching seat status:", error);
                }
            });
        }
        fetchSeatStatus();
        setInterval(fetchSeatStatus, 10000); 

        document.addEventListener("DOMContentLoaded", function () {
            var buttons = document.querySelectorAll('.buttons');
            var countdown;
            var selectedSeats = retrieveSelectedSeatsFromStorage();
            document.body.addEventListener('click', function (event) {
                if (event.target.classList.contains('buttons')) {
                    var seatCode = event.target.id;
                    var seatStatus = event.target.getAttribute('data-seat-status');

                    var isBooked = seatStatus === 'booked';
                    var isSold = seatStatus === 'sold';
                    console.log(seatStatus);
                    if (!isBookingStarted) {
                        startBooking();
                        isBookingStarted = true;
                    }
                    
                    toggleSeatSelection(seatCode, isBooked || isSold );
                }
            });
        });
        function startBooking() {
            if (!isThereSelectedSeat) {
                $('#bookingModal').modal('show');
                $('#okButton').one('click', function () {
                    $('#bookingModal').modal('hide');
                    countdown = countdownTime;
                    startCountdownTimer();
                });
            }
        }
        function retrieveSelectedSeatsFromStorage() {
            var storedSelectedSeats = sessionStorage.getItem('selectedSeats');
            return storedSelectedSeats ? JSON.parse(storedSelectedSeats) : [];
        }
        function startCountdownTimer() {
            $('#countdownTimer').show();
            countdownInterval = setInterval(function () {
                $('#countdownTimer').text("Time remaining: " + formatTime(countdown));
                countdown--;

                if (countdown <= 0) {
                    clearInterval(countdownInterval);
                    // resetBooking();
                    alert("Booking time expired. Please restart the booking process.");
                    sessionStorage.clear(); 
                    window.location.href = '@Url.Action("Index", "cinema")';
                }
            }, 1000);
        }
        $('#bookingModal').on('click', '#cancelButton', function (e) {
            $('#bookingModal').modal('hide');
            sessionStorage.removeItem("selectedSeatNames");
            // resetBooking();
            // selectedSeatsCountUpdate();
        });

        function formatTime(seconds) {
            var min = Math.floor(seconds / 60);
            var sec = seconds % 60;
            return min + ":" + (sec < 10 ? "0" : "") + sec;
        }


        function toggleSeatSelection(seatCode, isDisabled) {
            selectedSeats = JSON.parse(sessionStorage.getItem('selectedSeats')) || [];
            var maxSeats = parseInt("@Model?.Data?.MaxSeats", 10);
            var index = selectedSeats.indexOf(seatCode);
            if (!isDisabled && index === -1) {
                if (selectedSeats.length < maxSeats) {
                    $.ajax({
                        url: 'https://cache.cnetcommerce.com/api/cache/safePushEntry',
                        headers: {
                            "x-api-key": "3e1a8b15-ygqa-3965-l5es-509a88f53477",
                            "Content-Type": "application/json"
                        },
                        method: "POST",
                        data: JSON.stringify({
                            "key": seatCacheKey,
                            "value": parseInt(seatCode)
                        }),
                        success: function (response) {
                            if (response.isSuccessful) {
                                console.log("Status:", response.status);
                            } else {
                                console.error("Error: Request was not successful");
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error("Error fetching seat status:", error);
                        }
                    });
                    selectedSeats.push(seatCode);
                    var seatNames = selectedSeats.map(function (code) {
                        return document.getElementById(code).innerText;
                    });
                    sessionStorage.setItem('selectedSeatNames', JSON.stringify(seatNames));
                } else {
                    var alertElement = document.getElementById("seatLimitAlert");
                    alertElement.style.display = "block";
                    setTimeout(function () {
                        alertElement.style.display = "none";
                    }, 2000);
                    return;
                }
            } else if (!isDisabled) {
                selectedSeats.splice(index, 1);
                var updatedSeatNames = selectedSeats.map(function (code) {
                    return document.getElementById(code).innerText;
                });
                sessionStorage.setItem('selectedSeatNames', JSON.stringify(updatedSeatNames));
            }
            var button = document.getElementById(seatCode);
            if (button) {
                button.style.backgroundColor = index === -1 ? "green" : "white";
                button.style.color = index === -1 ? "white" : "green";
            }


            // updateButtonStatus();
            saveSelectedSeatsToStorage();
            // updateSelectedSeatsUI();
            // selectedSeatsCountUpdate()
            // return selectedSeats;
        }
        function saveSelectedSeatsToStorage() {
            sessionStorage.setItem('selectedSeats', JSON.stringify(selectedSeats));
        }
        $(document).ready(function () {
            $('#bookingModal').modal(
                {
                    backdrop: "static",
                    keyboard: false
                }
            );
            $('#bookingModal').on('click', '.close', function (e) {
                $('#bookingModal').modal('hide');
                sessionStorage.removeItem("selectedSeatNames");
                // resetBooking();
                // selectedSeatsCountUpdate();
            });

            // selectedSeatsCountUpdate();
        });
    </script>
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <div class="d-flex justify-content-between align-items-center w-100 ml-5">
                    <div class="Popcorn ">
                        <h4>Seats</h4>
                    </div>
                    <div>
                        <div class="today-date" style="display: inline-block; margin-top: 10px; margin-right: 10px;">
                            <div id="countdownTimer" style="display:none;"></div>
                        </div>
                    </div>
                </div>
            </div>
        </nav>
    </header>
    <div id="seatLimitAlert" class="alert alert-danger fixed-bottom mb-3" role="alert" style="display: none; position: fixed; bottom: 20px; left: 20px; width: 300px;">
        You can't select more than @Model?.Data?.MaxSeats seats
    </div>
    <div class="container-xl">
        <div id="seatInfoContainer">
            <div class="row mt-3">
                <div class="col-lg-10 mb-3">
                    <div style="background: lightgrey; padding: 20px;" class="mr-2">
                        @if (Model != null && Model.Data?.Seats != null && Model.Data.Seats.Any())
                        {
                            <div style="display: flex;justify-content:safe center; align-items: center; overflow-x: auto; margin-top: 30px;">
                                <table>
                                    @for (int y = Model.Data.MaxY; y >= 1; y--)
                                    {
                                        <tr>
                                            @for (int x = 1; x <= Model?.Data?.MaxX; x++)
                                            {
                                                <td style="height: 30px !important; width: 30px !important">
                                                    @if (Model.Data.Seats.Any(seat => seat.X == x && seat.Y == y && !string.IsNullOrWhiteSpace(seat.Name)))
                                                    {
                                                        var seat = Model.Data.Seats.First(seat => seat.X == x && seat.Y == y);
                                                        var seatStatuses = Model?.SeatStatus;
                                                        var seatStatus = seatStatuses?.FirstOrDefault(s => s.Value.ToString() == seat.Id);
                                                        var buttonClass = " rounded";
                                                        var seatStatusess = "Available";
                                                        var isButtonDisabled = false;

                                                        if (seatStatus != null)
                                                        {
                                                            if (seatStatus.Status == "taken")
                                                            {
                                                                seatStatusess = "taken";
                                                                buttonClass += " taken takenorbookedseats";
                                                            }
                                                             if (seatStatus.Status == "booked")
                                                            {
                                                                seatStatusess = "booked";
                                                                buttonClass += " booked takenorbookedseats ";
                                                                isButtonDisabled = true;
                                                            }
                                                            else if (seatStatus.Status == "sold")
                                                            {
                                                                seatStatusess = "sold";
                                                                buttonClass += " sold takenorbookedseats ";
                                                                isButtonDisabled = true;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            buttonClass += " buttons";
                                                        }
                                                        <button data-seat-status="@seatStatusess" id="@seat.Id" class="@buttonClass" @(isButtonDisabled ? "disabled" : "")>
                                                            @seat.Name
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <div class="hall">
                                                        </div>
                                                    }
                                                </td>

                                            }
                                        </tr>

                                    }
                                </table>
                            </div>
                        }
                        else
                        {
                            <div style="display: flex; align-items: center; justify-content: center; height: 100vh;">
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-exclamation-circle" style="font-size: 48px; color: red;"></i>
                                    <p>No seats available.</p>
                                </div>
                            </div>
                        }
                    </div>  
                    @*         <div class="screen-container">
                    <div class="screen"></div>
                    </div> *@
                    <div id="priceContainer" style="text-align: center; position: relative;  margin-top:30px; margin-bottom:20px; left: 50%; transform: translateX(-50%);">
                        <p class="text">All eyes this way please!</p>
                        <button id="skipButton" class="btn btn-outline-primary">Skip</button>
                    </div>
                </div>
                <div class="col-lg-2 ml-0">

                </div>
            </div>
        </div>
    </div>
    <div class="modal" tabindex="-1" role="dialog" id="bookingModal">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmation</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>
                        The selected seats will expire in 1 minute and you will get additional one miunute for every page you
                        progress towards checkout.In total you will have approximately 5 minutes to complete purchase.
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" id="cancelButton">Cancel</button>
                    <button type="button" class="btn btn-primary" id="okButton">OK</button>
                </div>
            </div>
        </div>
    </div>
</body>
<partial name="_Footer" />