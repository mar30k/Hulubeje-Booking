@model HulubejeBooking.Models.CInemaModels.SeatLayouts
@using System.Globalization
@using System.Web
@using System.Text.RegularExpressions
@using Newtonsoft.Json
@{
    string formattedDate = DateTime.Now.ToString("MMM-d h.mmtt");
}
@{
    var isVaild = ViewBag.isVaild;
    var isLoggedIN = ViewBag.isLoggedIn;
    int? redeemedSeatsCount = Model?.Data?.Seats?.Where(c => c.Type == "redeemed").Count();
}
@{
    var santizedMovieName = HttpUtility.JavaScriptStringEncode(Model?.Data?.MovieName);
    var listOfSeats = Model?.Data?.Seats?.Select(seat => seat.Id).ToList();
    var listOfSeatsJson = JsonConvert.SerializeObject(listOfSeats);
    int seatCount = Model?.Data?.Seats?.Count(seat => seat.Type == "seat" || seat.Type == "sold" || seat.Type == "booked" || seat.Type == "blocked" || seat.Type == "redeemed" || seat.Type == "reserved" || seat.Type == "taken") ?? 0;
}
<script>
    sessionStorage.setItem("isValid", @Json.Serialize(@isVaild));
    sessionStorage.setItem("isLoggedIn", @Json.Serialize(@isLoggedIN));
</script>
<partial name="_Navigation" />
<head>
    <title>Seat Layout</title>
    <style>
        .btn:focus,
        .btn:active {
            outline: none !important;
            box-shadow: none !important;
        }

        .container-xl {
            max-width: 100%;
            overflow-x: auto;
        }

        .buttons:hover {
            background-color: green;
            color: white;
            cursor: pointer;
        }

        .buttons {
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0;
            font-size: 10px;
            font-weight: 400;
            background: #fff;
            border: 1px solid #1ea83c;
            border-radius: 2px;
            color: #1ea83c;
            width: 30px;
            height: 30px;
        }
        .hall {
            width: 30px;
            height: 30px;
        }
        .taken {
            background-color: orange;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0;
            font-size: 10px;
            font-weight: 400;
            border: 1px solid #1ea83c;
            border-radius: 2px;
            width: 30px;
            height: 30px;
        }

        .booked {
            background-color: blue;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0;
            font-size: 10px;
            font-weight: 400;
            border: 1px solid #1ea83c;
            border-radius: 2px;
            width: 30px;
            height: 30px;
        }

        .redeemed {
            background-color: purple;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0;
            font-size: 10px;
            font-weight: 400;
            border: 1px solid #1ea83c;
            border-radius: 2px;
            width: 30px;
            height: 30px;
        }

        .reserved{
            background-color: #0dcaf0;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0;
            font-size: 10px;
            font-weight: 400;
            border: 1px solid #1ea83c;
            border-radius: 2px;
            width: 30px;
            height: 30px;
        }
        .sold {
            background-color: red;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0;
            font-size: 10px;
            font-weight: 400;
            border: 1px solid #1ea83c;
            border-radius: 2px;
            width: 30px;
            height: 30px;
        }

        .blocked {
            background-color: black;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0;
            font-size: 10px;
            font-weight: 400;
            border: 1px solid #1ea83c;
            border-radius: 2px;
            width: 30px;
            height: 30px;
        }
    </style>

    <script>
        var listOfSeats = @Html.Raw(listOfSeatsJson);
        var countdownreset;
        var countdown;
        var countdownInterval;
        var countdownTime;
        var isBookingStarted = false;
        var isThereSelectedSeat = retrieveSelectedSeatsFromStorage().length == 0 && sessionStorage.getItem('countdownStarted') == 'true';
        var selectedSeats = selectedSeats ? JSON.parse(sessionStorage.getItem('selectedSeats')) : [];
        var key = "cinema_" +'@Model?.Data?.CompanyTinNumber' + '_' + '@Model?.Data?.BranchCode' + '_' + '@Model?.Data?.MovieScheduleCode';
        var seatCacheKey = key +"_" +'@Model?.Data?.PhoneNumber';
        function fetchSeatStatus() {
            var data = seatCacheKey;
            $.ajax({
                url: '/CinemaSeatLayout/FetchSeatStatus',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function (response) {
                    var listOfSeats = @Html.Raw(listOfSeatsJson);
                    var fetchedSeatIds = response.map(function (seat) {
                        return seat.value.toString();
                    });

                    $(".buttonSeats").each(function () {
                        var buttonId = $(this).attr("id");
                        if (buttonId && fetchedSeatIds.indexOf(buttonId) === -1) {
                            $(this).removeClass("taken");
                            $(this).addClass("buttons");
                        }
                    });
                    var totaltakenSeats = response.filter(function (seat) {
                        return seat.status === "taken" && listOfSeats.includes(seat.value.toString());
                    }).length;
                    var takenSeatsCount = totaltakenSeats - selectedSeats.length;
                    var bookedSeatsCount = response.filter(function (seat) {
                        return seat.status === "booked" && listOfSeats.includes(seat.value.toString());
                    }).length;
                    bookedSeatsCount -= @redeemedSeatsCount;
                    var soldSeatsCount = response.filter(function (seat) { 
                        return seat.status === "sold" && listOfSeats.includes(seat.value.toString());
                    }).length;
                    var availableSeatsCount = @seatCount - (totaltakenSeats + bookedSeatsCount + soldSeatsCount);
                    response.forEach(function (seat) {
                        var buttonId = seat.value.toString();
                        var button = document.getElementById(buttonId);

                        if (button && selectedSeats.indexOf(buttonId) === -1) {
                            button.dataset.seatStatus = seat.status;
                            button.classList.remove("taken", "booked", "sold");
                            button.classList.add(seat.status);
                        }
                    });
                    $(".takenSeatCount").text(takenSeatsCount);
                    $(".soldSeatsCount").text(soldSeatsCount);
                    $(".bookedSeatCount").text(bookedSeatsCount);
                    $(".availableSeatCount").text(availableSeatsCount);
                },
                error: function (error) {
                    console.error('Error:', error);
                }
            });
        }
        setInterval(fetchSeatStatus, 10000); 

        document.addEventListener("DOMContentLoaded", function () {
            var buttons = document.querySelectorAll('.buttons');
            var selectedSeats = retrieveSelectedSeatsFromStorage();
            document.body.addEventListener('click', function (event) {
                if (event.target.classList.contains('buttons')) {
                    var seatCode = event.target.id;
                    var seatStatus = event.target.getAttribute('data-seat-status');

                    var isBooked = seatStatus === 'booked';
                    var isRedeemed = seatStatus === 'redeemed';
                    var isSold = seatStatus === 'sold';
                    var isReserved = seatStatus === 'reserved';
                    var isBlocked = seatStatus === 'blocked';
                    if (!isBookingStarted) {
                        startBooking(seatCode);
                        isBookingStarted = true;
                    }
                    
                    toggleSeatSelection(seatCode, isBooked || isSold || isRedeemed || isReserved || isBlocked);
                }
            });
        });
        function startBooking(seatCode) {
            if (!isThereSelectedSeat) {
                $('#bookingModal').modal('show');
            }
        }
       
        function retrieveSelectedSeatsFromStorage() {
            var storedSelectedSeats = sessionStorage.getItem('selectedSeats');
            return storedSelectedSeats ? JSON.parse(storedSelectedSeats) : [];
        }
        function startCountdownTimer() {
            countdownInterval = setInterval(function () {
                $('#countdownTimer').text("Time remaining: " + formatTime(countdown));
                countdown --;

                if (countdown <= 0) {
                    clearInterval(countdownInterval);
                    resetBooking();
                    alert("Booking time expired. Please restart the booking process.");
                    sessionStorage.clear(); 
                    window.location.href = '@Url.Action("Index", "cinema")';
                }
            }, 1000);
            $('#countdownTimer').show();
        }

         
        function formatTime(seconds) {
            var min = Math.floor(seconds / 60);
            var sec = seconds % 60;
            return min + ":" + (sec < 10 ? "0" : "") + sec;
        }


        function toggleSeatSelection(seatCode, isDisabled) {
            var button = document.getElementById(seatCode);
            var maxSeats = parseInt("@Model?.Data?.MaxSeats", 10);
            var index = selectedSeats.indexOf(seatCode);
            var seatData = {
                key: seatCacheKey,
                value: parseInt(seatCode)
            }
            if (!isDisabled && index === -1) {
                
                if (selectedSeats.length < maxSeats) {
                    $.ajax({
                        url: '/CinemaSeatLayout/SafePushEntry',
                        method: "POST",
                        data: JSON.stringify(seatData),
                        contentType: 'application/json',
                        success: function (response) {
                            if (response.isSuccessful) {
                                selectedSeats.push(seatCode);
                                var seatNames = selectedSeats.map(function (code) {
                                    return document.getElementById(code).innerText;
                                });
                                sessionStorage.setItem('selectedSeatNames', JSON.stringify(seatNames));
                                sessionStorage.setItem('selectedSeats', JSON.stringify(selectedSeats));
                                if (button) {
                                    button.style.backgroundColor = index === -1 ? "green" : "white";
                                    button.style.color = index === -1 ? "white" : "green";
                                }
                                updateButtonStatus();
                                if (countdownreset == true) {
                                    
                                    $.ajax({
                                        url: '/CinemaSeatLayout/GetEntryLifeSpan',
                                        method: "POST",
                                        data: JSON.stringify(seatCacheKey),
                                        contentType: 'application/json',
                                        cache: false,
                                        success: function (response) {
                                            countdown = parseInt(response);
                                            startCountdownTimer();
                                        },
                                        error: function (xhr, status, error) {
                                            console.error("Error fetching seat status:", error);
                                        }
                                    });
                                    countdownreset = false;
                                }
                                selectedSeatsCountUpdate();
                            } else {
                                var alertElement = document.getElementById("takenSeatAlert");
                                alertElement.style.display = "block";
                                setTimeout(function () {
                                    alertElement.style.display = "none";
                                }, 2000);
                                return;
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error("Error fetching seat status:", error);
                        }
                    });
                } else {
                    var alertElement = document.getElementById("seatLimitAlert");
                    alertElement.style.display = "block";
                    setTimeout(function () {
                        alertElement.style.display = "none";
                    }, 2000);
                    return;
                }
            } else if (!isDisabled) {
                $.ajax({
                    url: '/CinemaSeatLayout/PopEntry',
                    method: "POST",
                    data: JSON.stringify(seatData),
                    contentType: 'application/json',
                    success: function (response) {
                        selectedSeats.splice(index, 1);
                        var updatedSeatNames = selectedSeats.map(function (code) {
                            return document.getElementById(code).innerText;
                        });
                        sessionStorage.setItem('selectedSeatNames', JSON.stringify(updatedSeatNames));
                        sessionStorage.setItem('selectedSeats', JSON.stringify(selectedSeats));

                        if (button) {
                            button.style.backgroundColor = index === -1 ? "green" : "white";
                            button.style.color = index === -1 ? "white" : "green";
                        }
                        updateButtonStatus();
                        if (selectedSeats.length == 0) {
                            clearInterval(countdownInterval);
                            $('#countdownTimer').hide();
                            countdownreset = true;
                        }
                        selectedSeatsCountUpdate();
                    }, 
                    error: function (xhr, status, error) {
                        console.error("Error fetching seat status:", error);
                    }
                });           
            }

            
        }
        function resetBooking() {
            clearInterval(countdownInterval);
            var companyTinNumber = "@Model?.Data?.CompanyTinNumber";
            var movieScheduleCode = "@Model?.Data?.MovieScheduleCode";
            
            selectedSeats.forEach(function (selectedSeat) {
                var seatData = {
                    key: seatCacheKey,
                    value: parseInt(selectedSeat)
                }
                $.ajax({
                    url: '/CinemaSeatLayout/PopEntry',
                    method: "POST",
                    data: JSON.stringify(seatData),
                    contentType: 'application/json',
                    success: function (response) {
                        var button = document.getElementById(selectedSeat);
                        if (button) {
                            button.style.backgroundColor = "";
                            button.style.color = "green";
                        }
                        selectedSeats = [];

                        sessionStorage.setItem('selectedSeatNames', JSON.stringify(selectedSeats));
                        sessionStorage.setItem('selectedSeats', JSON.stringify(selectedSeats));
                        updateButtonStatus();
                    },
                    error: function (xhr, status, error) {
                        console.error("Error fetching seat status:", error);
                    }
                });
            });
            isBookingStarted = false;
        }
        function updateButtonStatus() {
            var skipButton = document.getElementById('skipButton');
            var countdownStarted = sessionStorage.getItem('countdownStarted');
            if (countdownStarted === 'true') {
                isBookingStarted = true;
                selectedSeats = retrieveSelectedSeatsFromStorage();
            }
            if (isBookingStarted) {
                var seatCount = selectedSeats.length;
                if (seatCount === 0) {
                    skipButton.innerText = "Skip";
                } else {
                    skipButton.innerText = "You Will Pay " + (seatCount * parseFloat("@Model?.Data?.Price")).toFixed(2) + " ETB for " + seatCount + " seats";
                }

            } else {
                skipButton.innerText = "Skip";
            }
        }

        $(document).ready(function () {
            $('#bookingModal').modal(
                {
                    backdrop: "static",
                    keyboard: false
                }
            );
            $('#bookingModal').on('click', '.close', function (e) {
                $('#bookingModal').modal('hide');
                selectedSeatsCountUpdate();
                resetBooking();
            });
            $('#bookingModal').on('click', '#cancelButton', function (e) {
                $('#bookingModal').modal('hide');
                resetBooking();
                selectedSeatsCountUpdate();
            });
            $('#okButton').one('click', function () {
                $('#bookingModal').modal('hide');
                $.ajax({
                    url: '/CinemaSeatLayout/GetEntryLifeSpan',
                    method: "POST",
                    data: JSON.stringify(seatCacheKey),
                    contentType: 'application/json',
                    cache: false,
                    success: function (response) {
                        countdown = parseInt(response);
                        startCountdownTimer();
                    },
                    error: function (xhr, status, error) {
                        console.error("Error fetching seat status:", error);
                    }
                });
            });
            applyEventListenersSkip();

            selectedSeatsCountUpdate();
            var countdownStarted = sessionStorage.getItem('countdownStarted');
            if (countdownStarted === 'true' && retrieveSelectedSeatsFromStorage().length >0) {
                $.ajax({
                    url: '/CinemaSeatLayout/GetEntryLifeSpan',
                    method: "POST",
                    data: JSON.stringify(seatCacheKey),
                    contentType: 'application/json',
                    cache: false,
                    success: function (response) {
                        countdown = parseInt(response);
                        startCountdownTimer();
                    },
                    error: function (xhr, status, error) {
                        console.error("Error fetching seat status:", error);
                    }
                });
                updateButtonStatus();
            }
            updateSelectedSeatsUI();
        });
        function retrieveSelectedSeatsFromStorage() {
            var storedSelectedSeats = sessionStorage.getItem('selectedSeats');
            return storedSelectedSeats ? JSON.parse(storedSelectedSeats) : [];
        }
        function selectedSeatsCountUpdate() {
            var selectedSeatsDisplay = document.getElementById("selectedSeatsDisplay");
            var selectedSeatsCountArray = sessionStorage.getItem('selectedSeats');
            var selectedSeatsArray = JSON.parse(selectedSeatsCountArray);
            var selectedSeatsCount = selectedSeatsArray ? selectedSeatsArray.length : 0;
            selectedSeatsDisplay.textContent = selectedSeatsCount;
        }
        function updateSelectedSeatsUI() {
            selectedSeats = retrieveSelectedSeatsFromStorage();
            selectedSeats.forEach(function (seatCode) {
                var button = document.getElementById(seatCode);
                if (button) {
                    button.style.backgroundColor = "green"; 
                    button.removeAttribute("disabled"); 
                    button.style.color = "white";0
                }
            });
        }
        function applyEventListenersSkip() {
            var button = document.getElementById('skipButton');
            if (button) {
                button.addEventListener('click', function () {
                    console.log("buttonclicked");
                    var selectedSeats = retrieveSelectedSeatsFromStorage();
                    var companyTinNumber = "@Model?.Data?.CompanyTinNumber";
                    var companyCode = "@Model?.Data?.CompanyCode";
                    var movieScheduleCode = "@Model?.Data?.MovieScheduleCode";
                    var articleCode = "@Model?.Data?.ArticleCode";
                    var movieName = @Html.Raw(Json.Serialize(Model?.Data?.MovieName));
                    var companyName = "@Model?.Data?.CompanyName";
                    var utcTime = "@Model?.Data?.UtcTime";
                    var selectedDate = "@Model?.Data?.SelectedDate";
                    var hallName = "@Model?.Data?.HallName";
                    var price = "@Model?.Data?.Price";
                    var dimension = "@Model?.Data?.Dimension";
                    var spaceType = "@Model?.Data?.SpaceType";
                    var branchCode = "@Model?.Data?.BranchCode";
                    var scheduleCode = "@Model?.Data?.MovieScheduleCode";
                    var phoneNumber = "@Model?.Data?.BranchCode";
                    var spaceId = "@Model?.Data?.SpaceId";
                    var remainingTime = countdown ?? 0;

                    var selectedSeatsJson = sessionStorage.getItem('selectedSeats');
                    var selectedSeatsArray = selectedSeatsJson ? JSON.parse(selectedSeatsJson) : [];
                    var numberOfElements = selectedSeatsArray.length;
                    sessionStorage.setItem('remainingTime', remainingTime);
                    if (remainingTime != 0) {
                        sessionStorage.setItem('countdownStarted', true);
                    }

                    var form = $('<form action="/moviemenu" method="get"></form>');

                    form.append('<input type="hidden" name="movieScheduleCode" value="' + movieScheduleCode + '" />');
                    form.append('<input type="hidden" name="movieName" value="' + movieName + '" />');
                    form.append('<input type="hidden" name="companyName" value="' + companyName + '" />');
                    form.append('<input type="hidden" name="hallName" value="' + hallName + '" />');
                    form.append('<input type="hidden" name="ScheduleTime" value="' + utcTime + '" />');
                    form.append('<input type="hidden" name="ScheduleDate" value="' + selectedDate + '" />');
                    form.append('<input type="hidden" name="price" value="' + price + '" />');
                    form.append('<input type="hidden" name="dimension" value="' + dimension + '" />');
                    form.append('<input type="hidden" name="spaceType" value="' + spaceType + '" />');
                    form.append('<input type="hidden" name="articleCode" value="' + articleCode + '" />');
                    form.append('<input type="hidden" name="branchCode" value="' + branchCode + '" />');
                    form.append('<input type="hidden" name="seats" value="' + numberOfElements + '" />');
                    form.append('<input type="hidden" name="seatCacheKey" value="' + seatCacheKey + '" />');
                    form.append('<input type="hidden" name="companyCode" value="' + companyCode + '" />');
                    form.append('<input type="hidden" name="spaceId" value="' + spaceId + '" />');

                    $('body').append(form);

                    form.submit();
                });
            } else {
                console.error("Button not found!");
            }
        }

    </script>
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container-fluid">
                <div class="d-flex justify-content-between align-items-center w-100 ml-lg-5">
                    <div class="Popcorn ">
                        <h4>Seats</h4>
                    </div>
                    <div>
                        <div class="today-date" style="display: inline-block; margin-top: 10px; margin-right: 10px;">
                            <div id="countdownTimer" style="display:none;"></div>
                        </div>
                    </div>
                </div>
            </div>
        </nav>
    </header>
    <div id="seatLimitAlert" class="alert alert-danger fixed-bottom mb-3" role="alert" style="display: none; position: fixed; bottom: 20px; left: 20px; width: 300px;">
        You can't select more than @Model?.Data?.MaxSeats seats
    </div>
    <div id="takenSeatAlert" class="alert alert-danger fixed-bottom mb-3" role="alert" style="display: none; position: fixed; bottom: 20px; left: 20px; width: 330px;">
        Someone Just Grabbed Your Seat
    </div>
    <div class="container-xl">
        <div id="seatInfoContainer">
            <div class="row mt-3">
                <div class="col-lg-10 mb-3 order-lg-1 order-2">
                    <div style="background: lightgrey; padding: 20px;" class="mr-2">
                        @if (Model != null && Model.Data?.Seats != null && Model.Data.Seats.Any())
                        {
                            <div style="display: flex;justify-content:safe center; align-items: center; overflow-x: auto; margin-top: 30px;">
                                <table>
                                    @for (int y = Model.Data.MaxY; y >= 1; y--)
                                    {
                                        <tr>
                                            @for (int x = 1; x <= Model?.Data?.MaxX; x++)
                                            {
                                                <td style="height: 30px !important; width: 30px !important">
                                                    @if (Model.Data.Seats.Any(seat => seat.X == x && seat.Y == y && (seat.Type == "seat" || seat.Type == "sold" || seat.Type == "booked" ||
                                                    seat.Type == "blocked" || seat.Type == "reserved" || seat.Type == "taken" || seat.Type == "redeemed")))
                                                    {
                                                        var seat = Model.Data.Seats.First(seat => seat.X == x && seat.Y == y);
                                                        var seatStatus = Model?.SeatStatus?.FirstOrDefault(s => s.Value.ToString() == seat.Id);
                                                        var buttonClass = " rounded ";
                                                        var seatStatusess = "Available";
                                                        var isButtonDisabled = false;

                                                        if (seat.Type != "aile")
                                                        {
                                                            if (seat.Type == "taken")
                                                            {
                                                                seatStatusess = "taken";
                                                                buttonClass += " taken buttons";
                                                            }
                                                            else if (seat.Type == "booked")
                                                            {
                                                                seatStatusess = "booked";
                                                                buttonClass += " booked ";
                                                                isButtonDisabled = true;
                                                            }
                                                            else if (seat.Type == "sold")
                                                            {
                                                                seatStatusess = "sold";
                                                                buttonClass += " sold";
                                                                isButtonDisabled = true;
                                                            }
                                                            else if (seat.Type == "reserved")
                                                            {
                                                                seatStatusess = "reserved";
                                                                buttonClass += "reserved";
                                                                isButtonDisabled = true;
                                                            }
                                                            else if (seat.Type == "redeemed")
                                                            {
                                                                seatStatusess = "redeemed";
                                                                buttonClass += " redeemed  ";
                                                                isButtonDisabled = true;
                                                            }
                                                            else
                                                            {
                                                                buttonClass += " buttons";
                                                            }
                                                        } 
                                                        else
                                                        {
                                                            buttonClass += " buttons";
                                                        }
                                                        <button data-seat-status="@seat.Type" id="@seat.Id" class="@buttonClass buttonSeats" @(isButtonDisabled ? "disabled" : "") >
                                                            @seat.Name
                                                        </button>
                                                    }
                                                    else
                                                    {
                                                        <div class="hall">
                                                        </div>
                                                    }
                                                </td>

                                            }
                                        </tr>

                                    }
                                </table>
                            </div>
                        }
                        else
                        {
                            <div style="display: flex; align-items: center; justify-content: center; height: 40vh;">
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-exclamation-circle" style="font-size: 48px; color: red;"></i>
                                    <p>No seats available.</p>
                                </div>
                            </div>
                        }
                    </div>  
                    @*         <div class="screen-container">
                    <div class="screen"></div>
                    </div> *@
                    <div id="priceContainer" style="text-align: center; position: relative;  margin-top:30px; margin-bottom:20px; left: 50%; transform: translateX(-50%);">
                        <p class="text">All eyes this way please!</p>
                        <button id="skipButton" class="btn btn-outline-primary">Skip</button>
                    </div>
                </div>
                <div class="col-lg-2 ml-0 order-lg-2 order-1 mb-2">
                    <div style="font-family: Arial, sans-serif; margin: 0 auto; border: 1px solid #ccc; background-color:lightgrey; padding: 20px; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); text-align: center;">
                        <div class="row">
                            <h4 style="color: #333; margin-bottom: 10px; background-color:#F9F7F5; padding: 10px;">@Model?.Data?.CompanyName</h4>
                            <div style="text-align: left;">
                                <p class="mb-1" style="margin: 0; color: #555; font-size: 15px;">
                                    <strong>Movie:</strong>&nbsp; @Regex.Unescape(Model?.Data?.MovieName ?? "")
                                </p>
                                <p class="mb-1" style="margin: 0; color: #555; font-size: 15px;">
                                    <strong>Hall Name:</strong>&nbsp; @Model?.Data?.HallName
                                </p>
                                <p class="mb-1" style="margin: 0; color: #555; font-size: 15px;">
                                    <strong>Time:</strong>&nbsp; @Model?.Data?.UtcTime (@GetEthiopianTime(Model?.Data?.UtcTime) Local)
                                </p>
                                <p class="mb-1" style="margin: 0; color: #555; font-size: 15px;">
                                    <strong>Date:</strong>&nbsp; @GetFormattedDateWithDayOfWeek(Model?.Data?.SelectedDate)
                                </p>
                                <p class="mb-1" style="margin: 0; color: #555; font-size: 15px;">
                                    <strong>Dimension:</strong>&nbsp;
                                    <span style="background-color: @(Model?.Data?.Dimension == "2D" ? "blue" : "red"); color:white; padding: 1.5px; border-radius:3px;">
                                        @Model?.Data?.Dimension
                                    </span>
                                </p>
                            </div>
                        </div>
                        @{
                            int? bookedSeatsCount = Model?.Data?.Seats?.Where(c => c.Type == "booked").Count();
                            int? soldSeatsCount = Model?.Data?.Seats?.Where(c => c.Type == "sold").Count();
                            int? blockedSeatsCount = Model?.Data?.Seats?.Where(c => c.Type == "blocked").Count();
                            int? reservedSeatsCount = Model?.Data?.Seats?.Where(c => c.Type == "reserved").Count();

                            var listOfSeatss = Model?.Data?.Seats?.Select(seat => seat.Id).ToList();
                            int? takenSeatCount = Model?.SeatStatus?
                            .Where(status => listOfSeatss != null && listOfSeatss.Contains(status.Value.ToString()))
                            .Count(status => status.Status == "taken");
                            // int? bookedSeatsCount = Model?.SeatStatus?.
                            // Where(status => listOfSeatss != null && listOfSeatss.Contains(status.Value.ToString()))
                            // .Count(status => status.Status == "booked") - redeemedSeatsCount;
                            // int? soldSeatsCount = Model?.SeatStatus?
                            // .Where(status => listOfSeatss != null && listOfSeatss.Contains(status.Value.ToString()))
                            // .Count(status => status.Status == "sold");
                            // int? blockedSeatsCount = Model?.SeatStatus?
                            // .Where(status => listOfSeatss != null && listOfSeatss.Contains(status.Value.ToString()))
                            // .Count(status => status.Status == "blocked");
                            // int? reservedSeatsCount = Model?.SeatStatus?
                            // .Where(status => listOfSeatss != null && listOfSeatss.Contains(status.Value.ToString()))
                            // .Count(status => status.Status == "reserved");
                            int? availableSeatCount = seatCount - (takenSeatCount + bookedSeatsCount + soldSeatsCount + redeemedSeatsCount + blockedSeatsCount + reservedSeatsCount);
                        }
                        <div style="margin-top: 10px; color: white; font-size: 15px; background-color: #F9F7F5; padding: 10px; text-align: left">
                            <div class="row">
                                <div class="col-10">
                                    <div class="row">
                                        <div class="col-8 ">
                                            <p style="color:black">Available seats</p>
                                        </div>
                                        <div class="col-4" style="text-align: center">
                                            <p class="availableSeatCount" style="background-color: white;  color: green;padding: 4px 4px; border-radius: 10px;
                                                border: 1px solid white; margin-right: 5px;">
                                                @(availableSeatCount ?? 0)
                                            </p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-10">
                                    <div class="row">
                                        <div class="col-8 ">
                                            <p style="color:black">Booked seats</p>
                                        </div>
                                        <div class="col-4" style="text-align: center">
                                            <p class="bookedSeatCount"style="background-color: blue;  color: white;padding: 4px 4px; border-radius: 10px;
                                                border: 1px solid blue; margin-right: 5px;">
                                                @(bookedSeatsCount ?? 0)
                                            </p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-10">
                                    <div class="row">
                                        <div class="col-8 ">
                                            <p style="color:black">Taken seats</p>
                                        </div>
                                        <div class="col-4" style="text-align: center">
                                            <p class="takenSeatCount" style="background-color: darkorange;  color: white;padding: 4px 4px; border-radius: 10px;
                                                border: 1px solid darkorange; margin-right: 5px;">
                                                @(takenSeatCount ?? 0)
                                            </p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-10">
                                    <div class="row">
                                        <div class="col-8 ">
                                            <p style="color:black">Sold seats</p>
                                        </div>
                                        <div class="col-4" style="text-align: center">
                                            <p class="soldSeatsCount" style="background-color: red;  color: white;padding: 4px 4px; border-radius: 10px;
                                                border: 1px solid red; margin-right: 5px;">
                                                @(soldSeatsCount ?? 0)
                                            </p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-10">
                                    <div class="row">
                                        <div class="col-8 ">
                                            <p style="color:black">Redeemed seats</p>
                                        </div>
                                        <div class="col-4" style="text-align: center">
                                            <p class="redeemedSeatsCount" style="background-color: purple;  color: white;padding: 4px 4px; border-radius: 10px;
                                                border: 1px solid purple; margin-right: 5px;">
                                                @(redeemedSeatsCount ?? 0)
                                            </p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-10">
                                    <div class="row">
                                        <div class="col-8 ">
                                            <p style="color:black">Reserved seats</p>
                                        </div>
                                        <div class="col-4" style="text-align: center">
                                            <p class="reservedSeatsCount" style="background-color: #0dcaf0;  color: white;padding: 4px 4px; border-radius: 10px;
                                                border: 1px solid #0dcaf0; margin-right: 5px;">
                                                @(reservedSeatsCount ?? 0)
                                            </p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-10">
                                    <div class="row">
                                        <div class="col-8 ">
                                            <p style="color:black">Selected seats</p>
                                        </div>
                                        <div class="col-4" style="text-align: center">
                                            <p id="selectedSeatsDisplay" style="background-color: green;  color: white;padding: 4px 4px; border-radius: 10px;
                                                border: 1px solid green; margin-right: 5px;">0
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal" tabindex="-1" role="dialog" id="bookingModal">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmation</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>
                        The selected seats will expire in 1 minute and you will get additional one miunute for every page you
                        progress towards checkout.In total you will have approximately 5 minutes to complete purchase.
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" id="cancelButton">Cancel</button>
                    <button type="button" class="btn btn-primary" id="okButton">OK</button>
                </div>
            </div>
        </div>
    </div>
</body>
<partial name="_Footer" />
@functions {
    public string GetFormattedDateWithDayOfWeek(string? date)
    {
        DateTime parsedDate;
        if (DateTime.TryParse(date, out parsedDate))
        {
            string dayOfWeek = parsedDate.ToString("ddd"); // Get abbreviated day of the week
            string formattedDate = parsedDate.ToString("dd-MM-yyyy"); // "dd-MM-yyyy" gives the desired format

            return $"{dayOfWeek} {formattedDate}";
        }

        return string.Empty;
    }
    public string GetEthiopianTime(string? utcTimeString)
    {
        string format = "h.mm tt";

        if (DateTime.TryParseExact(utcTimeString, format, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime utcTime))
        {

            DateTime ethiopianTime = utcTime.AddHours(utcTime.ToString("tt").Equals("AM") ? 6 : -6);

            return ethiopianTime.ToString("h.mm tt");
        }

        return "Invalid time format";
    }

}